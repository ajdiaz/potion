#! /bin/bash

# fun: srv::exists::upstart
# txt: implements srv::exists for upstart provider.
srv::exists::upstart () {
  std::mute service "${1}" status
  [ $? -ne 1 ]
}

# fun: srv::present::upstart
# txt: implements srv::present for upstart provider.
srv::present::upstart () {
  if ! srv::exists::upstart "$1"; then
    srv::create::upstart "$1" &&
      out::info "created service: $1" && return 0 ||
      err::trace "Unable to create service: $1"
    return 1
  fi
  return 0
}

# fun: srv::absent::upstart
# txt: implements srv::absent for upstart provider.
srv::absent::upstart () {
  if srv::exists::upstart "$1"; then
    srv::destroy::upstart "$1" &&
      out::info "destroyed service: $1" && return 0 ||
      err::trace "Unable to destroy service: $1"
    return 1
  fi
  return 0
}

# fun: srv::create::upstart
# txt: implements srv::create for upstart provider.
srv::create::upstart () {
  std::mute update-rc.d "${1}" defaults ||
    out::fail "unable to enable service: $1"
  std::mute service "${1}" start ||
    out::fail "unable to start service: $1"
}

# fun: srv::destroy::upstart
# txt: implements srv::destroy for upstart provider.
srv::destroy::upstart () {
  std::mute service "$1" stop ||
    out::fail "unable to stop service: $1"
  std::mute update-rc.d -f "${1}" remove ||
    out::fail "unable to disable service: $1"
}
