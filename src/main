#! /bin/bash
# mod: main
# api: Internal
# txt: The ``main`` module contain the specified potion body.

readonly VERSION="0.2.11"
export CONTEXT="main"

export POTION_DEFAULT_SOURCE=

# fun: main::init
# api: Internal
# txt: print nice potion logo and some custom messages at the beginning.
# env: POTION_DEFAULT_SOURCE: If set, always try to get potion files from this
#      url. Note that if ther arguments are passed in the command line, potion
#      will load all of them plus the defined in `POTION_DEFAULT_SOURCE`.
# env: VERSION: a readonly variable which contains the potion version number.
main::init () {

  if ! ${NOLOGO:-false}; then
  out::user ""
  out::user "${COLOR_USER}                                   o${COLOR_NONE}"
  out::user "${COLOR_USER}                                     o${COLOR_NONE}"
  out::user "                                   ___"
  out::user "${COLOR_WARN} ____       _   _                  ${COLOR_NONE}| |"
  local m="${COLOR_WARN}|  _ \\ ___ | |_(_) ___  _ __       "
  m+="${COLOR_NONE}|${COLOR_USER}o${COLOR_NONE}|"
  out::user "$m"
  local m="${COLOR_WARN}| |_) / _ \| __| |/ _ \| '_ \\    ${COLOR_NONE}.'   '."
  out::user "$m"
  local m="${COLOR_WARN}|  __/ (_) | |_| | (_) | | | |  ${COLOR_NONE}/   "
  m+="${COLOR_USER}o${COLOR_NONE}   \\"
  out::user "$m"
  local m="${COLOR_WARN}|_|   \\___/ \\__|_|\___/|_| |_|  "
  m+="${COLOR_NONE}:${COLOR_USER}____o__${COLOR_NONE}:"
  out::user "$m"
  local m="                                '.${COLOR_USER}"
  m+="_____${COLOR_NONE}.'"
  out::user "$m"
  else
    out::user "Starting potion..."
  fi
  out::user "${COLOR_USER}version${COLOR_NONE} ${VERSION}" 
  out::user "detected hardware architecture: $(std::arch)"
  out::user "detected os family: $(os::family)"
  out::user "detected os provider: $(os::provider)"
}

# general options handlers
main::opt_version () { out::info "Potion $VERSION"; exit 0;}
main::opt_quiet () { QUIET=true; return 1;}
main::opt_pretend () { export PRETEND=true; return 1;}
main::opt_verbose () { export VERBOSE=true; return 1;}
main::opt_nologo () { export NOLOGO=true; return 1;}
main::opt_nocolor () { export BLIB_DISABLE_COLORS=true; term::init; return 1;}

# create action
main::create::opt_artifacts () { main__create__artifacts="$1"; return 2;}
main::create::opt_compress () { main__create__compress=true; return 1;}
main::create::opt_output () { main__create__output="$1"; return 2;}
main::create::opt_secrets () { main__create__secrets="$1"; return 2;}

export artifacts
main::create () {
  local output=$'#! /bin/bash\nPOTION_COMPILED=true\n'
  ${QUIET:-false} || main::init
  out::info "output file: ${main__create__output:=./a.potion}"
  output+="$(<"$0")"$'\n'
  if [ "${main__create__artifacts}" ]; then
    [ -d "${main__create__artifacts}" ] ||
      err::trace "Artifacts directory does not exists or isn't a directory"

    [ -r "${main__create__artifacts}" ] ||
      err::trace "Unable to read artifacts directory"

    artifacts="$(cd "${main__create__artifacts}" &&
                 tar -c . | base64)"
    output+=$'\n'"$(artifact::build "${main__create__artifacts}")"$'\n'

    out::user "dumped artifacts from: ${main__create__artifacts}"
  fi
  if [ "${main__create__secrets}" ]; then
    output+=$'\n'"secret::load '${main__create__secrets}'"$'\n'
    out::user "set secret url to: ${main__create__secrets}"
  fi
  out::info "created core launcher"
  for template in "$@"; do
    [ -r "$template" ] ||
      err::trace "Unable to find template: $template"
    output+="$(<"$template")"$'\n'
    out::info "dumping template: $template"
  done
  output+=$'\nmeta::polulate\n'
  output+=$'\ncontext::run\n'
  if ${main__create__compress:-false}; then
    local launcher="#!/bin/bash"$'\n'
    launcher+="POTION_PAYLOAD='$(echo "${output}" | gzip -9 | base64)'"$'\n'
    # shellcheck disable=SC2016
    launcher+='exec bash < <(echo "$POTION_PAYLOAD" | base64 -d | gzip -d)'
    launcher+=$'\n'
    output="$launcher"
  fi
  echo "${output}" > "${main__create__output}"
}

# run action
main::run::opt_artifacts () { main__run__artifacts="$1"; return 2; }
main::run::opt_secrets () { main__run__secrets="$1"; return 2; }
main::run::opt_show_diffs() { export SHOWDIFF=true; return 1; }
main::run () {
  main::init "in-line"
  if [ "${main__run__artifacts}" ]; then
    [ -d "${main__run__artifacts}" ] ||
      err::trace "Artifacts directory does not exists or isn't a directory"

    [ -r "${main__run__artifacts}" ] ||
      err::trace "Unable to read artifacts directory"

    eval "$(artifact::build "${main__run__artifacts}")"
    out::user "dumped artifacts from: ${main__run__artifacts}"
  fi
  if [ "${main__run__secrets}" ]; then
    secret::load "${main__run__secrets}"
    out::user "loaded secrets from: ${main__run__secrets}"
  fi
  for src in "$@"; do
    include "$src" || err::trace "Unable to load potion file(s): $src"
  done
  if [[ "$POTION_DEFAULT_SOURCE" ]]; then
    include "$POTION_DEFAULT_SOURCE" ||
      err::trace "Unable to load potion file(s): $POTION_DEFAULT_SOURCE"
  fi
  meta::populate
  context::run
}

# eval action
main::eval::opt_show_diffs() { export SHOWDIFF=true; return 1; }
main::eval ()
{
  local cmd="$1"; shift
  main::init "in-line"
  meta::populate
  "$cmd" "$@" || err::trace
}

# fun: main [arguments]
# txt: function to create random errors and weird behaviour.
main () {
  # if this is a compiled potion, we don't need main
  ${POTION_COMPILED:-false} && main::init && return 0
  
  arg::opt MAIN -q --quiet    main::opt_quiet   'do not output messages'
  arg::opt MAIN -v --verbose  main::opt_verbose 'enable verbose mode'
  arg::opt MAIN -p --pretend  main::opt_pretend 'do nothing, just pretending'
  arg::opt MAIN -V --version  main::opt_version 'show program version number'
  arg::opt MAIN -L --no-logo  main::opt_nologo  'do not show ASCI art logo :('
  arg::opt MAIN -C --no-color main::opt_nocolor 'do not output colors ever'

  arg::action create main::create 'create new potion from templates'
  arg::param create "ingredients+" \
    'URL to the ingredient files to make the potion'
  arg::opt create -o: --output: main::create::opt_output \
    'set path to output potion filename'
  arg::opt create -a: --artifacts: main::create::opt_artifacts \
    'set path to artifacts directory'
  arg::opt create -c  --compress   main::create::opt_compress \
    'create compressed potion (require gzip)'
  arg::opt create -s:  --secrets:   main::create::opt_secrets \
    'set a secret file or URL to store passwords'
  
  arg::action run main::run 'run potion template'
  arg::param run "ingredients*" \
    'path to the scripts files (ingredients) to make the potion'
  arg::opt run -a: --artifacts: main::run::opt_artifacts \
    'set path to artifacts directory'
  arg::opt run -s:  --secrets:   main::run::opt_secrets \
    'set a secret file or URL to store passwords'
  arg::opt run -D --show-diffs   main::run::opt_show_diffs \
    'show differences when change a file'

  arg::action eval main::eval 'run potion command'
  arg::param eval "command" \
    'the potion command to evaluate'
  arg::param eval "params*" \
    'parameters to pass to the evaluation command'
  arg::opt eval -D --show-diffs   main::eval::opt_show_diffs \
    'show differences when change a file'
  arg::parse "$@"

}
shopt -s expand_aliases
