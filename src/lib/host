#! /bin/bash
# mod: host
# api: External
# txt: The `host` module provides functions to configure hostname of the
#      machine.
# use: host::present myhost.mydomain.com

# fun: host::exists [name=]<hostname>
# api: External
# txt: return true if the FQDN of the node is equal to specified one.
host::exists () {
  local host name
  std::parse "$@"
  host="$(hostname -f 2>/dev/null)"
  [ "$host" == "$name" ]
}

# private host::_create <hostname>
host::_create () {
  if ! ${PRETEND:-false}; then
    echo "${1%%.*}" > /etc/hostname
    echo "127.0.1.1 $1 ${1%%.*}" > /etc/hosts
    hostname "${1%%.*}"
  fi
}

# private host::_destroy <hostname>
host::_destroy () {
  local host
  if ! ${PRETEND:-false}; then
    hosts="$(grep -v "^127.0.1.1 $1 ${1%%.*}" /etc/hosts)"
    echo > /etc/hostname
    echo "$hosts" > /etc/hosts
    hostname ''
  fi
}

# fun: host::present [name=]<hostname>
# api: External
# txt: ensure than the node has the specified hostname.
host::present () {
  std::parse "$@"
  if ! host::exists "$name"; then
    if host::_create "$name"; then
      res::created host "$name"
    else
      err::trace "Unable to create host to: $1"
    fi
  else
    return 1
  fi
}

# fun: host::absent [name=]<hostname>
# api: External
# txt: ensure than the node has not the specified hostname.
host::absent () {
  std::parse "$@"
  if host::exists "$name"; then
    if host::_destroy "$name"; then
      res::deleted host "$name"
    else
      err::trace "Unable to destroy host: $1"
    fi
  else
    return 1
  fi
}
