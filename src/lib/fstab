#! /bin/bash
# vim: ft=sh:
# mod: fstab
# txt: The `fstab` module provides functions to add entries to fstab file.
# use: fstab::present /dev/sda1 \\
#        mount=/ \\
#        fstype=xfs \\
#        opts=default,noauto \\
#        remount=true

# fun: fstab::exists [name=]<device>
# api: potion
# txt: return true if device is set in fstab
fstab::exists () {
  local name
  eval "$(std::parse "$@")"
  std::mute grep -q "^$name" /etc/fstab
}

# private fstab::_create <device> <mntpoint> <type> [options] [dump] [pass]
fstab::_create () {
  local mount
  eval "$(std::parse "$@")"
  [ "$mount" ] || err::trace "fstab require mount parameter"
  ${PRETEND:-false} || 
    echo "$name $mount ${fstype:-auto} ${opts:-defaults}" \
         "${dump:-1} ${pass:-2}" >> /etc/fstab

  if ${FSTAB_REMOUNT:-false}; then
    std::run mount "-oremount,${opts}" "$mount"
  fi

  if ${FSTAB_MOUNT:-false}; then
    std::run mount "$mount"
  fi
}

# private fstab::_destroy <device>
fstab::_destroy () {
  local fstab
  fstab="$(grep -v "^$1" /etc/fstab)"
  ${PRETEND:-false} || echo "$fstab" > /etc/fstab
}

# fun: fstab::present [name=]<device> mount=<mountpoint> [options]
# api: potion
# txt: ensure that fstab entry for device is present
# opt: name: the device name to ensure
# opt: mount: the mountpoint for the device
# opt: fstype: the fstype of the device filesystem (default: auto)
# opt: opts: mount options (default: defaults)
# opt: dump: the dump number (default 0)
# opt: pass: the pass number (default 1)
# opt: remount: if true remount device when added to fstab
fstab::present () {
  local remount
  if ! fstab::exists "$@"; then
    # shellcheck disable=SC2015
    FSTAB_REMOUNT="$remount" \
      fstab::_create "$@" &&
        res::created fstab "$@" ||
        err::trace "Unable to create fstab for device: $*"
  else
    return 1
  fi
}

# fun: fstab::absent [name=]<device>
# api: potion
# txt: ensure that specified device has not entry in fstab
fstab::absent () {
  eval "$(std::parse "$@")"
  if fstab::exists "$name"; then
    if fstab::_destroy "$name"; then
      res::deleted fstab "device=$name"
    else
      err::trace "Unable to destroy fstab for device: $1"
    fi
  else
    return 1
  fi
}
