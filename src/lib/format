#! /bin/bash
# mod: format
# txt: The ``format`` module provides a way to format and mount specified
#      block devices.

# private format::_exists::format <device>
format::_exists::format () {
  std::mute blkid "$1"
}

# fun: format::exists [name=]<device> [options]
# txt: return true if device exists and it's mounted on mountpoint
# opt: name: the device name
format::exists () {
  eval $(std::parse "$@")
  format::_exists::format "$name"
}

# private format::_create::format <device> [fstype]
format::_create::format () {
  std::run mkfs.${2:-ext4} "$1" ||
    err::trace "Unable to format format: $1"

}

# private format::_create::mount <device> <mountpoint> <fstype> <opts>
format::_create::mount () {
  std::run mount ${3:+-t ${3}} ${4:+-o ${4}} "$1" "$2" ||
    err::trace "Unable to mount format: $1"
}

# fun: format::present [name=]<device> [options]
# txt: ensure that specified device has format
# opt: name: the device to be initialized
# opt: fstype: the filesystem type to format the device
format::present () {
  eval $(std::parse "$@")

  if ! format::_exists::format "$name"; then
    format::_create::format "$name" ${fstype} &&
      res::created format "name=$name fstype=$fstype" ||
      err::trace "Unable to format format: $name"
  else
    return 1
  fi
}

# fun: format::absent [name=]<device>
# txt: ensure that specific device is not formatted.
format::absent () {
  out::warn "To avoid data loss format::absent do nothing for device $@"
}

