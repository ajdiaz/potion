#! /bin/bash
# mod: srv
# api: External
# txt: The `srv` module provides high-level functions to manage package
#      installations.
# use: srv::present sshd

# private srv::sysinit
srv::_sysinit () {
  local si
  si="$(cache::get _sysinit)"
  [ "$si" ] && echo "$si" && return 0

  if std::mute os::path systemctl; then
    local si=systemd
  elif std::mute os::path service; then
    local si=upstart
  elif std::mute os::patch initctl; then
    local si=sysv
  else
    return 1
  fi
  cache::put _sysinit "$si"
  echo "$si"
  return 0
}

# fun: srv::exists [name=]<service>
# api: External
# txt: return true if the specific service is present in the system.
srv::exists () {
  local si name
  std::parse "$@"
  si="$(srv::_sysinit)"

  if std::func "srv::exists::_${si}"; then
    "srv::exists::_${si}" "$name"
  else
    err::trace "Potion does not support '$si' service control... yet"
  fi
}

# fun: srv::present [name=]<service>
# api: External
# txt: ensure that specified service is installed on the system.
srv::present () {
  local si name
  std::parse "$@"
  si="$(srv::_sysinit)"

  if std::func "srv::present::_${si}"; then
    "srv::present::_${si}" "$name"
  else
    err::trace "Potion does not support '$si' service control... yet"
  fi
}

# fun: srv::absent [name=]<service>
# api: External
# txt: ensure that specified service is not present on the system.
srv::absent () {
  local si name
  std::parse "$@"
  si="$(srv::_sysinit)"

  if std::func "srv::absent::_${si}"; then
    "srv::absent::_${si}" "$name"
  else
    err::trace "Potion does not support '$si' service control... yet"
  fi
}

# internal srv::refresh
srv::refresh () {
  local si name
  std::parse "$@"
  si="$(srv::_sysinit)"

  if std::func "srv::refresh::_${si}"; then
    "srv::refresh::_${si}" "$name"
  else
    err::trace "Potion does not support '$si' service control... yet"
  fi
}
