#! /bin/bash
# mod: mount
# api: potion
# txt: The `mount` module provides functions to ensure that specific
#      mountpoint is mounted.
# use: mount::present /mnt device=/dev/sda1 fstype=xfs

# fun: mount::exists [name=]<name> [opts]
# api: potion
# txt: return true if specific device is mounted with passed options
# opt: device: the device to mount
# opt: fstype: the fstype of the device filesystem (default: auto)
mount::exists () {
  eval "$(std::parse "$@")"
  while read _dev _ _mnt _ _fstype _; do
    [ "$_mnt" == "${name}" ] && return 0
  done < <(mount)
  return 1
}

mount::_create () {
  eval "$(std::parse "$@")"
  mount_opt="${fstype:+-t $fstype}"
  std::run mount ${mount_opt} ${device} "${name}"
}

mount::_destroy () {
  eval "$(std::parse "$@")"
  std::run umount "$name"
}

# fun: mount::present [name=]<name> [opts]
# api: potion
# txt: ensure that specific device is mounted according with passed options.
# opt: device: the device to mount
# opt: fstype: the fstype of the device filesystem (default: auto)
mount::present () {
  if ! mount::exists "$@"; then
    mount::_create "$@" &&
      res::created mount "$@" ||
      err::trace "Unable to mount $@"
  else
    return 1
  fi
}

# fun: mount::absent [name=]<name>
# api: potion
# txt: ensure that specific mount point is not mounted.
mount::absent () {
  if mount::exists "$@"; then
    mount::_destroy "$@" &&
      res::deleted mount "$@" ||
      err::trace "Unable to umont $@"
  else
    return 1
  fi
}
