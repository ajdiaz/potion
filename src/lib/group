#! /bin/bash
# mod: group
# api: External
# txt: The `group` module offers a way to ensure that specified group of
#      uses is created or not in the system.
# use: group::present mygroup

# fun: group::exists [name=]<groupname>
# api: External
# txt: return true or false if the specific groupname exists or not,
#      respectively.
group::exists () {
  local name
  std::parse "$@"
  std::mute grep "^$name" /etc/group
}

# private group::_create <groupname> [password]
# create specific groupname passed as argument.
# GROUP_SYSTEM: if true create system group (false by default).
# GROUP_GID: if set, try to use as GID for the group.
group::_create () {
  local -a ua_opts=()
  ua_opts+=( "${GROUP_SYSTEM:+-r }" )
  ua_opts+=( "${GROUP_GID:+-g ${GROUP_GID} }" )
  std::run groupadd "${ua_opts[@]}" "$1"
}

# private group::_destroy <groupname>
# destroy the groupname passed as argument.
group::_destroy () {
  std::run groupdel "$1"
}


# fun: group::present [name=]<groupname> system=<true|false> [gid=gid]
# api: External
# txt: create group if not exists
# opt: name: the name of the group to create.
# opt: system: if true create a system group.
# opt: gid: the GID of the new group
group::present () {
  local system gid
  std::parse "$@"
  if ! group::exists "$name"; then
    # shellcheck disable=SC2015
    GROUP_SYSTEM="${system}" \
    GROUP_GID="${gid}" \
    group::_create "$name" &&
      res::created group "$name" "system=${system}" "gid=${gid}" ||
      err::trace "Unable to create group: $name"
  else
    return 1
  fi
}

# fun: group::absent [name=]<groupname>
# api: External
# txt: destroy groupname if exists
group::absent () {
  std::parse "$@"
  if group::exists "$name"; then
    if group::_destroy "$name"; then
      res::deleted group "$name"
    else
      err:trace "Unable to destroy group: $name"
    fi
  else
    return 1
  fi
}
