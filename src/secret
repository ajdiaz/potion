#! /bin/bash
# mod: secret
# txt: The `secret` module allows you to get/set passwords or secret config
#      keys from diferent sources instead of save them in plain text in the
#      potion file.
# env: SECRET_MASTERKEY: Path to file where the master key for secrets lives.
#      By default ``/etc/potion.key``

SECRET_MASTERKEY="${SECRET_MASTERKEY:-/etc/potion.key}"

declare -A _secrets

# fun: secret::dump [name=]<name>
# txt: dump the encrypted file of a secret plain file.
secret::dump ()
{
  _gpg () {
    gpg --symmetric -z 9 --require-secmem \
        --cipher-algo AES256 --s2k-cipher-algo AES256 \
        --s2k-digest-algo SHA512 --s2k-mode 3 --batch \
        --s2k-count 65000000 --compress-algo BZIP2 --armor \
        --passphrase-file "${SECRET_MASTERKEY}"
  }

  local url="${1#name=}"
  case "$url" in
    gpg://*|gpg+file://*)
      url="${url#*://}"
      _gpg < "$url";;
    gpg+*)
      url="${url#gpg+}"
      curl -sqL "$url" | _gpg;;
    crypt+*)
      url="${url#crypt+}"
      curl -sqL "$url" |
              openssl enc -e -a -aes-256-cbc -kfile "${SECRET_MASTERKEY}";;
    *) url="${url#file://}"
       # shellcheck disable=SC1090
       cat "$url" || err::trace "Invalid secret file format" ;;
  esac
}

# fun: secret::load [name=]<name>
# txt: load a secret file
secret::load () {
  local err=$"Unable to load secrets"
  local url="${1#name=}"
  case "$url" in
    gpg://*|gpg+file://*)
      url="${url#*://}"
      eval "$(gpg -d --batch --passphrase-file "$SECRET_MASTERKEY" "$url")" ||
        err::trace "$err"
      ;;
    gpg+*)
      url="${url#gpg+}"
      eval "$(curl -sqL "$url" |
              gpg -d --batch --passphrase-file "$SECRET_MASTERKEY")" ||
                err::trace "$err"
      ;;
    crypt+*)
      url="${url#crypt+}"
      eval "$(curl -sqL "$url" |
              openssl enc -d -a -aes-256-cbc -kfile "${SECRET_MASTERKEY}")" ||
        err::trace "$err"
      ;;
    *) url="${url#file://}"
       # shellcheck disable=SC1090
       source "$url" || err::trace "$err" ;;
  esac
}

# fun: secret::load_inline <format> <content>
# txt: load scripts from the inline string. Available formats are plain,
#      crypt or gpg.
secret::load_inline () {
  local err=$"Unable to load secrets inline"
  local format="${1#name=}"
  case "$format" in
    gpg)
      eval "$(gpg --batch --passphrase-file "${SECRET_MASTERKEY}" -d <<<"$2")" ||
        err::trace "$err"
      ;;
    crypt)
      eval "$(openssl enc -d -a -aes-256-cbc -kfile "${SECRET_MASTERKEY}" <<<"$2")" ||
        err::trace "$err"
      ;;
    plain)
      eval "$2" || err::trace "$err"
      ;;
    *)
      # shellcheck disable=SC1090
      source "$url" || err::trace "$err"
      ;;
  esac
}

# fun: secret::add [name=]<name> content=<content>
# txt: add new secret with specified content associated with key passed as
#      argument.
secret::add () {
  eval "$(std::parse "$@")"
  # shellcheck disable=2154
  _secrets["$name"]="$content"
}

# fun: secret <name>
# txt: return the secret text associated with specified name
secret () {
  echo "${_secrets["$1"]}"
}
