#! /bin/bash

# fun: file::hmac <path_to_file>
# txt: print to stdout the HMAC of the content of the file passed as
#      argument.
# env: ALGO: set the algorithm to use for calculate HMAC. Valid values are:
#      sha1, md5, sha256, sha512. The proper helper tool must be installed
#      on the system.
file::hmac () {
  ALGO="${ALGO:=sha1}"
  local hmac=
  local path="$(os::path ${ALGO}sum)"

  if [ "$path" ]; then
    hmac="$(${ALGO}sum "$1")"
    read hmac _ <<<"${hmac}"
    echo "$hmac"
  else
    err::trace "Required binary '${ALGO}sum' is not installed"
  fi
}

# fun: file::exists <fname>
# txt: return true if file exists, or none otherwise
# env: FILE_CONTENT: the content of the file
file::exists () {
  [ -r "$1" ] || return 1

  local old_hmac="$(file::hmac "$1")"

  if [ "$FILE_ARTIFACT" ]; then
    local new_hmac="$(artifact::hmac "$FILE_ARTIFACT")"
  else
    local new_hmac="$(std::hmac "$FILE_CONTENT")"
  fi

  [ "$new_hmac" == "$old_hmac" ]
}

# fun: file::create <fname> [owner:group] [chmod]
# txt: create file passed as argument with properly owner and permissions.
# env: FILE_CONTENT: the content of the file
#      FILE_ARTIFACT: the artifact name to read data.
file::create () {
  if [ "$FILE_CONTENT" ]; then
    if ! echo -n "$FILE_CONTENT" > "$1"; then
      rm -f "$1"
      err::trace "Unable to dump content to: $1"
    fi
  elif [ "$FILE_ARTIFACT" ]; then
    artifact::exists "$FILE_ARTIFACT" ||
      err::trace "Missing artifact: $FILE_ARTIFACT"
    artifact::read "$FILE_ARTIFACT" > "$1"
  fi
  chown "${2:-0:0}" "$1" &&
  chmod "${3:-644}" "$1"
}

# fun: file::destroy <fname>
# txt: remove the filename passed as argument
file::destroy () {
  rm -f "$1"
}

# fun: file::present <fname> [owner:group] [chmod]
# txt: ensure that file passed as argument exists.
# env: FILE_CONTENT: the content of the file
file::present () {
  if ! file::exists "$1"; then
    file::create "$@" &&
      out::info "created file: $1" ||
      err::trace "Unable to create file: $1"
  fi
}


# fun: file::absent <fname>
# txt: ensure that file passed as argument does not exist.
file::absent () {
  if file::exists "$1"; then
    file::destroy "$1" &&
      out::info "destroyed file: $1" ||
      err::trace "Unable to destroy file: $1"
  fi
}
