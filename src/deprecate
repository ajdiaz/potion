#! /bin/bash
# mod: deprecated
# api: Internal
# txt: This internal module provides a way to mark deprecated features or
#      modules.

# fun: deprecated [name=]<name> [version=version] [date=date]
# api: Internal
# txt: set a deprecation mark called name (could be a message), when potion
#      version is lower to specified version a warning is raised, otherwise
#      execution fails with an error. The same behaviour can be used with
#      a date in the format %y-%m-%d, until that date the deprecation
#      warning message will show, after that date execution breaks.
deprecated () {
  local line file; read -r line _ file < <(caller 1)
  local version date name message="deprecation mark"
  eval "$(std::parse "$@")"

  # shellcheck disable=SC2153
  version::cmp "$VERSION" "$version"
  case $? in
    0|255)
      err::trace "Deprecated $name: $message (at $file:$line)";;
    1)
      out::warn "deprecated $name: $message (at $file:$line)";;
  esac

  [[ "$date" ]] || return

  local year month day

  { IFS='-' read -r year month day <<< "$date"; }

  if [[ "$year" -lt "$(printf "%(%Y)T" -1)" ]] &&
    [[ "$month" -lt "$(printf "%(%m)T" -1)" ]] &&
    [[ "$day" -lt "$(printf "%(%d)T" -1)" ]]
  then
      out::warn "deprecated $name: $message (at $file:$line)"
  else
    err::trace "Deprecated $name: $message (at $file:$line)"
  fi
}
