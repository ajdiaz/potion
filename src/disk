#! /bin/bash

# fun: disk::exists::format <device>
# txt: return true if device is formatted.
disk::exists::format () {
  std::mute blkid "$1"
}

# fun: disk::exists::mount <mntpoint>
# txt: return true if disk is mounted
disk::exists::mount () {
  while read mnt _; do
    [ "$mnt" == "$1" ] && return 0
  done
  return 1
}

# fun: disk::exists <device> <mountpoint>
# txt: return true if device exists and it's mounted on mountpoint
disk::exists () {
  disk::exists::format "$1" ||
    disk::exists::mount "$2"
}

# fun: disk::create::format <device>
# txt: create format for the specified device.
# env: FSTYPE: the filesystem type to be used, ext4 by default.
disk::create::format () {
  mkfs.${FSTYPE:-ext4} "$1" ||
    err::trace "Unable to format disk: $1"

}

# fun: disk::create::mount <device> <mountpoint>
# txt: mount the specified device in the specified mountpoint
# env: FSTYPE: the filesystem type to be used, ext4 by default.
# env: MOUNTOPTS: mount options
disk::create::mount () {
  mount ${FSTYPE:+-t ${FSTYPE}} ${MOUNTOPTS:+-o ${MOUNTOPTS}} "$1" "$2" ||
    err::trace "Unable to mount disk: $1"
}

# fun: disk::create <device> [mountpoint]
# txt: format and mount the specified device.
# env: FSTYPE: the filesystem type to be used, ext4 by default.
# env: MOUNTOPTS: mount options
disk::create () {
  disk::exists::format "$1" ||
    disk::create::format "$1"

  [ "$2" ] || return 0

  disk::exists::mount "$@" ||
    disk::create::mount "$@"
}

# fun: disk::present <device> [mountpoint]
# txt: ensure that specified device is ready to be used, and mounted in
#      properly mountpoint.
# env: FSTYPE: the filesystem type to be used, ext4 by default.
# env: MOUNTOPTS: mount options
disk::present () {
  if ! disk::exists::format "$1"; then
    disk::create::format "$1" &&
      out::info "created disk format: $1" ||
      err::trace "Unable to format disk: $1"
  fi
  
  [ "$2" ] || return 0

  if ! disk::exists::mount "$@"; then
    disk::create::mount "$@" &&
      out::info "created disk mount: $1 (${2})" ||
      err::trace "Unable to mount disk: $1 into $2"
  fi
  return 0
}

# fun: disk::absent <device> <mountpoint>
# txt: ensure that specified mount point is not mounted. NOTE: For security
#      reasons, this function do not remove data from the device, only
#      umount it.
disk::absent () {
  if disk::exists::mount "$@"; then
    disk::destroy "$@" &&
      out::info "destroyed disk mount: $1" ||
      err::trace "Unable to destriy disk mount: $1 from $2"
  fi
}

