#! /bin/bash
# req: err

# fun: user::exists <username>
# txt: return true or false if the specific username exists or not,
#      respectively.
user::exists () {
  std::mute id "$1"
}

# fun: user::home <username>
# txt: print in stdout the home directory of the specific username.
user::home () {
  eval echo "~$1"
}

# fun: user::create <username> [password]
# txt: create specific username passed as argument.
# env: USER_BASE_DIR: set the base director to create home directories.
# env: USER_COMMENT: set the GECOS field in user record.
# env: USER_GROUPS: a comma separated list of groups for the user.
# env: USER_NOHOME: if true do not create home directory (false by default).
# env: USER_SYSTEM: if true create system user (false by default).
# env: USER_UID: if set, try to force that UID as user id for the new user.
# env: USER_SHELL: set the shell of the username.
user::create () {
  local ua_opts=""
  local ua_opts+="${USER_BASE_DIR:+-b ${USER_BASE_DIR} }"
  local ua_opts+="${USER_COMMENT:+-c ${USER_COMMENT} }"
  local ua_opts+="${USER_GROUPS:+-G ${USER_GROUPS} }"
  if ${USER_NOHOME:-false}; then
    local ua_opts+="-M "
  else
    local ua_opts+="-m "
  fi
  local ua_opts+="${USER_SYSTEM:+-r }"
  local ua_opts+="${USER_UID:+-u ${USER_UID} }"
  local ua_opts+="${USER_SHELL:+-s ${USER_SHELL} }"
  useradd $ua_opts "$1"
}

# fun: user::destroy <username>
# txt: destroy the username passed as argument.
# env: USER_KEEPDATA: if set do not remove home directory and other user
#      files.
user::destroy () {
  userdel -f ${USER_KEEPDATA:--r} "$1"
}


# fun: user::present <username> [password]
# txt: create user if not exists
# env: USER_BASE_DIR: set the base director to create home directories.
# env: USER_COMMENT: set the GECOS field in user record.
# env: USER_GROUPS: a comma separated list of groups for the user.
# env: USER_NOHOME: if true do not create home directory (false by default).
# env: USER_SYSTEM: if true create system user (false by default).
# env: USER_UID: if set, try to force that UID as user id for the new user.
# env: USER_SHELL: set the shell of the username.
user::present () {
  if ! user::exists "$1"; then
    user::create "$@" &&
      out::info "created user $1" ||
      err::trace "unable to create user $1"
  fi
}

# fun: user::absent <username>
# txt: destroy username if exists
# env: USER_KEEPDATA: if set do not remove home directory and other user
#      files.
user::absent () {
  if user::exists "$1"; then
    user::destroy "$@" &&
      out::info "destroyed user $1" ||
      err:trace "unable to destroy user $1"
  fi
}
